#cloud-config

# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided. 
write_files:
- content: "br_netfilter"
  path: /etc/modules-load.d/br_netfilter.conf
- content: "ebtables"
  path: /etc/modules-load.d/ebtables.conf
- content: "ebtable_filter"
  path: /etc/modules-load.d/network.conf
- content: "overlay"
  path: /etc/modules-load.d/overlay.conf
- content: |
    ip_tables
    iptable_nat
    iptable_filter
  path: /etc/modules-load.d/iptables.conf
- content: |
    net.bridge.bridge-nf-call-arptables=1
    net.bridge.bridge-nf-call-ip6tables=1
    net.bridge.bridge-nf-call-iptables=1
  path: /etc/sysctl.d/10-br-netfilter.conf
- content: |
    net.ipv4.ip_forward=1
  path: /etc/sysctl.d/10-ipv4-forwarding-on.conf
- content: |
    fs.may_detach_mounts=1
  path: /etc/sysctl.d/10-fs-may-detach-mounts.conf

# This is very similar to runcmd, but commands run very early
# in the boot process, only slightly after a 'boothook' would run.
# bootcmd should really only be used for things that could not be
# done later in the boot process.  bootcmd is very much like
# boothook, but possibly with more friendly.
# - bootcmd will run on every boot
# - the INSTANCE_ID variable will be set to the current instance id.
# - you can use 'cloud-init-per' command to help only run once
bootcmd:
- echo ${ip_address} ${hostname} >> /etc/hosts

# runcmd contains a list of either lists or a string
# each item will be executed in order at rc.local like level with
# output to the console
# - runcmd only runs during the first boot
# - if the item is a list, the items will be properly executed as if
#   passed to execve(3) (with the first arg as the command).
# - if the item is a string, it will be simply written to the file and
#   will be interpreted by 'sh'
#
# Note, that the list has to be proper yaml, so you have to quote
# any characters yaml would eat (':' can be problematic)
runcmd:
- 'modprobe overlay'
- 'modprobe br_netfilter'
- 'modprobe ebtables'
- 'modprobe ebtable_filter'
- 'modprobe ip_tables'
- 'modprobe iptable_nat'
- 'modprobe iptable_filter'
- 'sysctl -p /etc/sysctl.d/10-br-netfilter.conf'
- 'sysctl -p /etc/sysctl.d/10-ipv4-forwarding-on.conf'
- 'sysctl -p /etc/sysctl.d/10-fs-may-detach-mounts.conf'

hostname: "${hostname}"

# Add each entry to ~/.ssh/authorized_keys for the configured user or the
# first user defined in the user definition directive.
ssh_authorized_keys: 
- ${ssh_pub_key}
